---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11.10"
  python-module:
    type: string
    default: "api_tabular"
  publish-branch:
    type: string
    default: "master"
  cache-prefix:
    type: string
    default: "py-cache-v2"

jobs:
  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "uv.lock" }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Branch }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install uv
          command: |
            python -m pip install --upgrade pip
            pip install uv
      - run:
          name: Install python dependencies
          command: uv sync
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "uv.lock" }}
          paths:
            - .uv
      - persist_to_workspace:
          root: .
          paths:
            - .

  set_version:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Update version in pyproject.toml
          command: |
            # Extract the current version from pyproject.toml
            CURRENT_VERSION=$(grep -oP '^version = "\K[^"]+' pyproject.toml)

            if [[ $CIRCLE_TAG ]]; then
                VERSION=$CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == << pipeline.parameters.publish-branch >> ]]; then
                VERSION=${CURRENT_VERSION%.*}.$CIRCLE_BUILD_NUM
            else
                VERSION=${CURRENT_VERSION%.*}.$CIRCLE_BUILD_NUM+${CIRCLE_SHA1:0:7}
            fi

            # Update the version in pyproject.toml
            sed -i "s/^version = \".*\"$/version = \"$VERSION\"/" pyproject.toml

            # Display updated pyproject.toml for debugging
            cat pyproject.toml | grep version

            # Commit the updated file
            git config user.name "CircleCI Bot"
            git config user.email "circleci@example.com"
            git add pyproject.toml
            git commit -m "CI: Update version to $VERSION" || echo "No changes to commit."
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            uv run ruff check --select I .
            uv run ruff format --check .

  tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: |
            uv run pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes
      - store_test_results:
          path: reports/python

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: uv build
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            uv publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}"

workflows:
  build:
    jobs:
      - install:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - set_version:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - set_version
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - tests:
          requires:
            - set_version
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - tests
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
