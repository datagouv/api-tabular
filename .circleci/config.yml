---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11.10"
  python-module:
    type: string
    default: "api_tabular"
  publish-branch:
    type: string
    default: "master"
  cache-prefix:
    type: string
    default: "py-cache-v2"
  postgrest-port:
    type: string
    default: "8080"
  api-port:
    type: string
    default: "8005"

jobs:
  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "poetry.lock" }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Branch }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install python dependencies
          command: |
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "poetry.lock" }}
          paths:
            - .venv
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            poetry run ruff check --select I .
            poetry run ruff format --check .

  tests:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
      - image: "postgrest/postgrest:v12.2.3"
        environment:
          PGRST_DB_URI: postgres://csvapi:csvapi@postgres-test:5432/csvapi
          p: http://127.0.0.1:8080
          PGRST_SERVER_PORT: 8080
          PGRST_DB_ANON_ROLE: csvapi
          PGRST_DB_SCHEMA: csvapi
          PGRST_DB_AGGREGATES_ENABLED: true
        ports:
          - 8080:8080
      - image: "postgres:14"
        environment:
          POSTGRES_DB: csvapi
          POSTGRES_USER: csvapi
          POSTGRES_PASSWORD: csvapi
        volumes:
          - ./db/initdb/:/docker-entrypoint-initdb.d/
          - ./db/sample.csv:/tmp/sample.csv
          - ./db/exceptions.csv:/tmp/exceptions.csv
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Wait for PostgREST to be ready
          command: |
            dockerize -wait http://localhost:<< pipeline.parameters.postgrest-port >> -timeout 1m
      - run:
          name: Start service
          command: |
            poetry run adev runserver -p<< pipeline.parameters.api-port >> api_tabular/app.py
      - run:
          name: Run tests
          command: |
            poetry run pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes
      - store_test_results:
          path: reports/python

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Set the version number
          command: |
            if [[ $CIRCLE_TAG ]]; then
                export PACKAGE_VERSION=$CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == << pipeline.parameters.publish-branch >> ]]; then
                # for main branches, can't add the commit hash since it's not a valid format for publishing
                export PACKAGE_VERSION=$(poetry version -s)$CIRCLE_BUILD_NUM
            else
                # for feature branches, add the commit hash
                export PACKAGE_VERSION=$(poetry version -s)$CIRCLE_BUILD_NUM+${CIRCLE_SHA1:0:7}
            fi
            # Display some debug info
            echo "Building a wheel release with version $PACKAGE_VERSION, build number: $CIRCLE_BUILD_NUM, commit hash: ${CIRCLE_SHA1:0:7}, tag: $CIRCLE_TAG."
            # Save the version number in a file
            echo "export PACKAGE_VERSION=\"$PACKAGE_VERSION\"" >> .env_vars
      - run:
          name: Build a distributable package
          command: |
            # Get the version number
            source .env_vars
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                poetry build
            else
                # Relies on a dev version like "1.2.1.dev" by default
                poetry version $PACKAGE_VERSION
                poetry build
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            poetry publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

workflows:
  build:
    jobs:
      - install:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - tests:
          requires:
            - install
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - tests
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
