---
version: 2.1

parameters:
  python-version:
    type: string
    default: "3.11.10"
  python-module:
    type: string
    default: "api_tabular"
  publish-branch:
    type: string
    default: "master"
  cache-prefix:
    type: string
    default: "py-cache-v2"
  api-port:
    type: string
    default: "8005"

jobs:
  install:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - restore_cache:
          keys:
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "poetry.lock" }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Branch }}
            - << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install python dependencies
          command: |
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          key: << pipeline.parameters.cache-prefix >>-v1-{{ arch }}-{{ checksum "poetry.lock" }}
          paths:
            - .venv
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Lint and format code and sort imports
          # ruff check --select I . : check linting and imports sorting without fixing (to fix, use --fix)
          # ruff format --check . : check code formatting without fixing (to fix, remove --check)
          command: |
            poetry run ruff check --select I .
            poetry run ruff format --check .

  setup-test-containers:
    machine:
      image: ubuntu-2004:current  # Machine executor needed for Docker-in-Docker (docker compose)
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Start containers
          command: |
            docker compose up -d
      - run:
          name: Debug container status
          command: |
            # TEMPORARY: Debug container status for troubleshooting
            echo "Container status after startup:"  # DEBUG/TEMPORARY
            docker compose ps  # DEBUG/TEMPORARY
      - run:
          name: Wait for PostgreSQL to be ready
          command: |
            # Wait for PostgreSQL to be ready to accept connections
            timeout 60 bash -c 'until docker compose exec -T postgres-test pg_isready -U csvapi; do sleep 2; done'
      - run:
          name: Wait for PostgREST to be ready
          command: |
            # Wait for PostgREST to be ready
            timeout 30 bash -c 'until curl -f http://localhost:8080/ > /dev/null 2>&1; do sleep 2; done'
      - run:
          name: Verify database setup
          command: |
            # Verify that test data was loaded correctly
            docker compose exec -T postgres-test psql -U csvapi -d csvapi -c "SELECT COUNT(*) FROM csvapi.tables_index;"
      - run:
          name: Debug container logs
          command: |
            # TEMPORARY: Debug container logs for troubleshooting
            echo "=== PostgreSQL logs ==="  # DEBUG/TEMPORARY
            docker compose logs postgres-test | tail -20  # DEBUG/TEMPORARY
            echo "=== PostgREST logs ==="  # DEBUG/TEMPORARY
            docker compose logs postgrest | tail -20  # DEBUG/TEMPORARY
          when: always
      - run:
          name: Install python and dependencies
          command: |
            PYTHON_SHORT_VERSION=$(echo << pipeline.parameters.python-version >> | cut -d '.' -f 1,2)
            sudo add-apt-repository ppa:deadsnakes/ppa
            sudo apt-get update
            sudo apt-get install -y python$PYTHON_SHORT_VERSION
            curl -sSL https://install.python-poetry.org | python$PYTHON_SHORT_VERSION -
            /home/circleci/.local/bin/poetry config virtualenvs.in-project true
            /home/circleci/.local/bin/poetry install
      - run:
          name: Start service
          command: |
            nohup /home/circleci/.local/bin/poetry run adev runserver -p<< pipeline.parameters.api-port >> api_tabular/app.py > server.log 2>&1 &
      - run:
          name: Check service
          command: |
            curl http://localhost:8005/health/
      - run:
          name: Run tests
          command: |
            /home/circleci/.local/bin/poetry run pytest --junitxml=reports/python/tests.xml -p no:sugar --color=yes
      - store_test_results:
          path: reports/python
      - run:
          name: Cleanup containers
          command: |
            docker compose down
          when: always
      - run:
          name: Stop test service
          command: |
            pkill -f "adev runserver" || true
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - .

  build:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Set the version number
          command: |
            if [[ $CIRCLE_TAG ]]; then
                export PACKAGE_VERSION=$CIRCLE_TAG
            elif [[ $CIRCLE_BRANCH == << pipeline.parameters.publish-branch >> ]]; then
                # for main branches, can't add the commit hash since it's not a valid format for publishing
                export PACKAGE_VERSION=$(poetry version -s)$CIRCLE_BUILD_NUM
            else
                # for feature branches, add the commit hash
                export PACKAGE_VERSION=$(poetry version -s)$CIRCLE_BUILD_NUM+${CIRCLE_SHA1:0:7}
            fi
            # Display some debug info
            echo "Building a wheel release with version $PACKAGE_VERSION, build number: $CIRCLE_BUILD_NUM, commit hash: ${CIRCLE_SHA1:0:7}, tag: $CIRCLE_TAG."
            # Save the version number in a file
            echo "export PACKAGE_VERSION=\"$PACKAGE_VERSION\"" >> .env_vars
      - run:
          name: Build a distributable package
          command: |
            # Get the version number
            source .env_vars
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release, version has been handled upstream
                poetry build
            else
                # Relies on a dev version like "1.2.1.dev" by default
                poetry version $PACKAGE_VERSION
                poetry build
            fi
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - .

  publish:
    docker:
      - image: cimg/python:<< pipeline.parameters.python-version >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Publish on PyPI
          command: |
            poetry publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

workflows:
  build-test-deploy:
    jobs:
      - install:
          filters:
            branches:
              only:
                - refactor/tests-on-db  # TEMPORARY: for testing CI with real database
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lint:
          requires:
            - install
          filters:
            branches:
              only:
                - refactor/tests-on-db  # TEMPORARY: for testing CI with real database
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - setup-test-containers:
          requires:
            - install
          filters:
            branches:
              only:
                - refactor/tests-on-db  # TEMPORARY: for testing CI with real database
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - build:
          requires:
            - lint
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - build
          filters:
            branches:
              only:
                - << pipeline.parameters.publish-branch >>
                - /[0-9]+(\.[0-9]+)+/
                - /rc[0-9]+/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
